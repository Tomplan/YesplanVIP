//
//  LoginInteractor.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 14/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Foundation
import NetworkRequestKit
import SwiftyJSON
import Alamofire
import PromiseKit
import ws
import Arrow
import then

protocol LoginBusinessLogic
{
  func loginPressed(request: Login.EnterLogin.Request)
    
}

protocol LoginDataStore
{
//  var basic: Basic! { get set }
//    var baseKey: String! { get set }

}

class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
//    var basic: Basic!
//    var baseKey: String!
    
  var presenter: LoginPresentationLogic?
  var worker: LoginWorker?
    var events = Events()
  
  // MARK: Do something
    
    func loginPressed(request: Login.EnterLogin.Request) {
      
        let companyUrl = request.companyURL
        let apiKey = request.apiKey
        
        let urlComponents = NSURLComponents()
        urlComponents.scheme = "https";
        urlComponents.host = "\(companyUrl!)";
        urlComponents.path = "/api/events";
        urlComponents.query = "api_key=\(apiKey!)";
        
        let url = try? urlComponents.url!.asURL()
//        print("url1: ", url!)
        
    worker = LoginWorker()
        
        
        print("worker: ", worker?.verifyUrl(urlString: "\(String(describing: url!))"))
//        if worker?.verifyUrl(urlString: "\(String(describing: url!))") == true {
        
        worker?.verifyUrl(urlString: "\(String(describing: url!))").then { result in
            print(result)

            if result == true {
                print("true indeed")
                
            urlComponents.path = ""
            urlComponents.query = nil
//
            if let x = try? urlComponents.url!.asURL() {
            let y = (String(describing: x))
//
            UserDefaults.standard.set(y, forKey: "URL")
            UserDefaults.standard.set(apiKey, forKey: "KEY")
//
//            let base = Basic()
//            base.ws = WS(UserDefaults.standard.string(forKey: "URL")!)
//
            let response = Login.EnterLogin.Response(success: true)
                self.presenter?.presentSomething(response: response)
            }
            else {
                print("nope")
            }
        } else {
            print("no valid url")
            let response = Login.EnterLogin.Response(success: false)
                self.presenter?.presentSomething(response: response)
            return
        }
        }
    }
}
