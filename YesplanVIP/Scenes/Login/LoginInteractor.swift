//
//  LoginInteractor.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 14/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Foundation
import NetworkRequestKit
import SwiftyJSON
import Alamofire
import PromiseKit

protocol LoginBusinessLogic
{
  func loginPressed(request: Login.EnterLogin.Request)
}

protocol LoginDataStore
{
  //var name: String { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
  var presenter: LoginPresentationLogic?
  var worker: LoginWorker?
  //var name: String = ""
  
  // MARK: Do something
    
    func loginPressed(request: Login.EnterLogin.Request) {
      
    worker = LoginWorker()
    worker?.doSomeWork()
        
        let companyUrl = request.companyURL 
        let apiKey = request.apiKey
        
        // insert Alamofirerequest
        
        let urlComponents = NSURLComponents()
        urlComponents.scheme = "https";
        urlComponents.host = "\(String(describing: companyUrl))";
        urlComponents.path = "";
        urlComponents.query = "api_key=\(String(describing: apiKey))"
        
        if let url = try? urlComponents.url!.asURL() {
        var urlRequest = URLRequest(url: url)
//            
//            final public class MakeRequestThenIgnoreResult : NetworkRequest {
//                public typealias ResponseType = IgnorableResult
//                
//                public var baseURL: String { return "\(urlRequest)"}
//                public var endpoint: String { return "/post" }
//                public var method: HTTPMethod { return .post }
//                public var parameters: [String : Any]? { return ["ignore": "this"] }
//                
//                public func perform() -> Promise<ResponseType> {
//                    return networkClient.performRequest(self).then(responseHandler)
//                }
                
//            }
            
        } else {
            print("no valid url")
            return
            
        }
        
        
        if companyUrl != "" && apiKey != "" {
    let response = Login.EnterLogin.Response(success: true)
    presenter?.presentSomething(response: response)
        }
        else {
            let response = Login.EnterLogin.Response(success: false)
            print("please fill")
            presenter?.presentSomething(response: response)
        }
  }
}
