//
//  EventsTabInteractor.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 22/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import ws
import then

protocol EventsTabBusinessLogic
{
  func doSomething(request: EventsTab.Something.Request)
}

protocol EventsTabDataStore
{
}

class EventsTabInteractor: EventsTabBusinessLogic, EventsTabDataStore
{
//    private var client = YpClient()

  var presenter: EventsTabPresentationLogic?
  var worker: EventsTabWorker?
    
    var fetchedEvents: Events = Events()
    var fetchedStatuses: Statuses = Statuses()
    var fetchedProfiles: Profiles = Profiles()
    
    var eventsArray: [(key: String, value: [Event])] = [(key: String, value: [Event])]()
    var statusesArray: [Status] = [Status]()
    var profilesArray: [Profile] = [Profile]()
    var error: String?
    
    var yesplan: Yesplan = Yesplan()
    
  // MARK: Do something

  func doSomething(request: EventsTab.Something.Request) // -> Promise<EventsTab.Something.Response>
  {
    worker = EventsTabWorker()
    worker?.makePromiseChain()
//    client.getGroups(from: Yp.groups) { result in
//        switch result {
//        case .success(let items):
//            print(items)
////            guard let data = events
//            for item in items.data {
//                if let name = item.name {
//                print(name)
//                }
////                for location in item.locations {
////                    if let name = location.name {
////                        print(name)
////
////                    }
////                }
//            }
//        case .failure(let error):
//            print("error: \(error)")
//        }
//        }
    
    
    yesplan.getAll(fetchedEvents, query: "event:date:#today + event:date:#next13days")
        .then((worker?.groupEventsByStartdate)!)
        .then((worker?.sortEventsInEachGroupByTime)!)
        .then((worker?.sortDictByDate)!)
        .then { result in
            self.eventsArray = result
        }
    
        .then(yesplan.getAll(fetchedStatuses))
        .then { result in
            self.statusesArray = result.data
        }
        
        .then(yesplan.getAll(fetchedProfiles))
        .then { result in
            self.profilesArray = result.data
        }
        .onError { e in
            if let wsError = e as? WSError {
                print(wsError.status)
                print(wsError.status.rawValue) // RawValue for Int status
                print(wsError.localizedDescription) // RawValue for Int status

            }
//        .onError { e in
            // An error occured :/
            print(e)
            self.error = "\(e)"
            let response = EventsTab.Something.Response(
                events: self.eventsArray,
                statuses: self.statusesArray,
                profiles: self.profilesArray,
                error: self.error
            )
            self.presenter?.presentEvents(response: response)

        }

        .finally {
     
        let response = EventsTab.Something.Response(
            events: self.eventsArray,
            statuses: self.statusesArray,
            profiles: self.profilesArray,
            error: self.error
        )
        self.presenter?.presentEvents(response: response)
    }

//                print("pagination: ", s.fetchedEvents.pagination )
//                s.yesplan.getMore(s.fetchedEvents, paginationNext: s.fetchedEvents.pagination.next!).then { more in
//                    print("more", more.pagination)
//                }
  }
}
