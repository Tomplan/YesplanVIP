//
//  EventsTabInteractor.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 22/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EventsTabBusinessLogic
{
  func doSomething(request: EventsTab.Something.Request)
}

protocol EventsTabDataStore
{
  var basic: Basic? { get set }
}

class EventsTabInteractor: EventsTabBusinessLogic, EventsTabDataStore
{
    var basic: Basic? = Basic()
    
  var presenter: EventsTabPresentationLogic?
  var worker: EventsTabWorker?
    var events: Events = Events()
    var event: Event = Event()
    var groups: Groups = Groups()
    var group: Group = Group()
  // MARK: Do something
  
  func doSomething(request: EventsTab.Something.Request)
  {
    print("EventsTabInteractor.doSomething")
    worker = EventsTabWorker()
    worker?.doSomeWork()
    print("basic: ", basic?.ws.baseURL)
    if let base = basic?.ws {
    print("base: ", base)
        base.getAll(events).then { events in
            print(events)
//                    }.onError { e in
//                        // An error occured :/
//                        print(e)
//                    }.finally {
//            //            // In any case, reload the tableView
//            //            //                print(self.events)
//            //            //                print("data: ", self.events.data)
//                        print("pagination: ", self.events.pagination)
//            //            for event in self.events.data {
//            //                print("id: ", event.id)
                        }
    } else {
        print("no good")
    }
//
//    base.getAll(events).then { events in
//                        print(events.pagination)
//                    }
//        self.events = fetchedEvents
//        }.onError { e in
//            // An error occured :/
//            print(e)
//        }.finally {
//            // In any case, reload the tableView
//            //                print(self.events)
//            //                print("data: ", self.events.data)
//            print("pagination: ", self.events.pagination)
////            for event in self.events.data {
////                print("id: ", event.id)
////            }
//            //                self.v.tableView.reloadData()
//            //                self.v.refreshControl.endRefreshing()
//        }
    
//    event.fetchEvent(id: "192337153-1479892000").then { fetchedEvent in
//        self.event = fetchedEvent
//        }.onError { e in
//            print(e)
//        }.finally {
//
////            dump(self.event)
//            print(self.event.defaultscheduleendtime!)
//            print(self.event.locations![0].name!)
//            print(self.event.locations![0]._type!)
//
//
//    }
    
    
    
    
    let response = EventsTab.Something.Response()
    presenter?.presentSomething(response: response)
  }
}
