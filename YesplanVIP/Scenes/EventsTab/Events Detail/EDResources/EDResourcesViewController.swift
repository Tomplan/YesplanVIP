//
//  EDResourcesViewController.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 11/11/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EDResourcesDisplayLogic: class
{
    func displaySomething(viewModel: EDResources.Something.ViewModel)
}

class EDResourcesViewController: CollectionViewController, EDResourcesDisplayLogic // UIViewController
{
    var interactor: EDResourcesBusinessLogic?
    var router: (NSObjectProtocol & EDResourcesRoutingLogic & EDResourcesDataPassing)?
    var sections: [EDResources.Something.ViewModel.Section] = [EDResources.Something.ViewModel.Section]()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = EDResourcesInteractor()
        let presenter = EDResourcesPresenter()
        let router = EDResourcesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
    }
    
    @objc private func refresh() {
        doSomething()
    }
    
    // MARK: Do something
    
    func doSomething()
    {
        let request = EDResources.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: EDResources.Something.ViewModel)
    {
        
        sections = viewModel.sections
        
        let grid = Grid(columns: 1, margin: UIEdgeInsets(all: 4))
        let mysections = sections.compactMap { section -> CollectionViewSection in
            let items = section.rows.compactMap { resourcebooking -> CollectionViewViewModelProtocol in
                resourcebooking.resourcebooking.unfold()
            }
            let header = MultiHeaderViewModel(section.header)
            let section =  CollectionViewSection(header: header, items: items)
            
            return section
        }
        self.source  = CollectionViewSource(grid: grid, sections: mysections)
    }
}

//extension EDResourcesViewController: EDResourcesViewModelDelegate {
//
//    func didSelect(resourcebooking: Resourcebooking) {
//        let viewController = EDResourcesViewController(nibName: nil, bundle: nil)
//        viewController.resourcebooking = resourcebooking
//        self.show(viewController, sender: nil)
//    }
//}
//
