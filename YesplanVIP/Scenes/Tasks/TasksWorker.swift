//
//  TasksWorker.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 13/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class TasksWorker
{
    func stringToDateShort(myDateString: String) -> String {
        if myDateString != "no deadline" {
        let dateFormatter = DateFormatter()
        let tempLocale = dateFormatter.locale // save locale temporarily
        dateFormatter.locale = Locale(identifier: "nl_BE") // set locale to reliable US_POSIX
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"
        let date = dateFormatter.date(from: myDateString)!
        dateFormatter.dateFormat = "yyyy-MM-dd"
        let dateString = dateFormatter.string(from: date)
        dateFormatter.locale = tempLocale // reset the locale
        return dateString
        }
        else{
            return myDateString
        }
    }
    
    func groupTasksByDue(tasks: Tasks) -> [String : [Task]]
    {
        //        First: group all tasks where due = "no deadline"
//        var tasksSortedWithoutDue = [Task]()
//        var tasksSortedWithDue = [Task]()
//
//        var taskDictNoDue = [String : [Task]]()
//        var taskDictDue = [String : [Task]]()
        var taskDict = [String : [Task]]()
//
//        for task in tasks.data where task.due == "no deadline" {
//            tasksSortedWithoutDue.append(task)
//        }
////        print("tasksSortedWithoutDue: ", tasksSortedWithoutDue )
//        taskDictNoDue["no deadline"] = tasksSortedWithoutDue
//
//        for task in tasks.data where task.due != "no deadline" {
//            tasksSortedWithDue.append(task)
//        }
//
//        print("tasksSortedWithDue: ", tasksSortedWithDue)
//        taskDictDue = Dictionary(grouping: tasksSortedWithDue, by: { $0.due.convertDateString(dateFormat: "yyyy-MM-dd")!})
//
//        taskDict = taskDictNoDue.merged(with: taskDictDue)
//        taskDict = Dictionary(grouping: tasks.data, by: { $0.due})
//        for task in taskDict where task.key != "no deadline" {
        taskDict = Dictionary(grouping: tasks.data, by: { $0.due.convertDateString(dateFormat: "yyyy-MM-dd")!})
//        }
        return taskDict
    }
    
    func sortTasksInEachGroupByDue(taskDict: [String : [Task]]) -> [String : [Task]]
    {
        var tasks: [String:[Task]] = [String:[Task]]()
        for (key, value) in taskDict {
            let valueSorted = value.sorted(by: { $0.due < $1.due } )
            tasks[key] = valueSorted
            
        }
        return tasks
    }
    func sortDictByDate(dictTasks: [String:[Task]]) -> [(key: String, value: [Task])] {
        
        let sortedDictByDate = dictTasks.sorted(by:  { $0.0 < $1.0 })
        print("sortedDictByDate: ", sortedDictByDate)
        return sortedDictByDate
    }
    
    func showErrorPopup(e:Error) { print("An error occured \(e)") }
    
}
