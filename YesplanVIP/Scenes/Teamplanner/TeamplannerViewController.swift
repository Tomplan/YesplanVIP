//
//  TeamplannerViewController.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 13/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftUI
import MDatePickerView
import SwiftUI

protocol TeamplannerTabDisplayLogic: class
{
  func displaySomething(viewModel: TeamplannerTab.Something.ViewModel)
}

class TeamplannerTabViewController: UIViewController, UICollectionViewDelegateFlowLayout, TeamplannerTabDisplayLogic
{
    lazy var MDate : MDatePickerView = {
           let mdate = MDatePickerView()
               mdate.delegate = self
           mdate.Color = UIColor.darkGray
           mdate.translatesAutoresizingMaskIntoConstraints = false
           return mdate
          }()

       let Today : UIButton = {
           let but = UIButton(type:.system)
           but.tintColor = UIColor.white
           but.setTitle("ToDay", for: .normal)
           but.addTarget(self, action: #selector(today), for: .touchUpInside)
           but.translatesAutoresizingMaskIntoConstraints = false
           return but
       }()

       @objc func today() {
           MDate.selectDate = Date()
       }
       
       
       var datePicker : UIDatePicker = UIDatePicker()
       var toolBar = UIToolbar()
    
        var interactor: TeamplannerTabBusinessLogic?
        var router: (NSObjectProtocol & TeamplannerTabRoutingLogic & TeamplannerTabDataPassing)?
        var v = TeamplannerTabView()

        var sections = [TeamplannerTab.Something.ViewModel.Section]()
    
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = TeamplannerTabInteractor()
    let presenter = TeamplannerTabPresenter()
    let router = TeamplannerTabRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
//  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
//  {
//    if let scene = segue.identifier {
//      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
//      if let router = router, router.responds(to: selector) {
//        router.perform(selector, with: segue)
//      }
//    }
//  }
  
  // MARK: View lifecycle
    override func loadView() { view = v }

  override func viewDidLoad()
  {
    super.viewDidLoad()

    // Yesplan Prefs Button
    let yesplanPrefsButton = UIButton(type: .system)
    yesplanPrefsButton.addTarget(self, action: #selector(yesplanPrefs), for: .touchUpInside)
    yesplanPrefsButton.setImage(#imageLiteral(resourceName: "yesplanNB 180x180"), for: .normal)
    yesplanPrefsButton.setTitle("setup", for: .normal)
    yesplanPrefsButton.tintColor = UIColor.yellow
    let widthConstraintYesplanPrefsButton = yesplanPrefsButton.widthAnchor.constraint(equalToConstant: 32)
    let heightConstraintYesplanPrefsButton = yesplanPrefsButton.heightAnchor.constraint(equalToConstant: 32)
    heightConstraintYesplanPrefsButton.isActive = true
    widthConstraintYesplanPrefsButton.isActive = true
    self.navigationItem.rightBarButtonItem = UIBarButtonItem(customView: yesplanPrefsButton)

    // CalendarUpButton
    let calendarUpButton = UIButton(type: .system)
    calendarUpButton.addTarget(self, action: #selector(calendarUp), for: .touchUpInside)
    calendarUpButton.setImage(#imageLiteral(resourceName: "CalendarUp"), for: .normal)
    calendarUpButton.setTitle("", for: .normal)
    calendarUpButton.tintColor = UIColor.gray
    let widthConstraintCalendarUpButton = calendarUpButton.widthAnchor.constraint(equalToConstant: 20)
    let heightConstraintCalendarUpButton = calendarUpButton.heightAnchor.constraint(equalToConstant: 20)
    heightConstraintCalendarUpButton.isActive = true
    widthConstraintCalendarUpButton.isActive = true
    let leftbarButtonItem1 = UIBarButtonItem(customView: calendarUpButton)

    // CalendarButton
    let calendarButton = UIButton(type: .system)
    calendarButton.addTarget(self, action: #selector(calendar), for: .touchUpInside)
    calendarButton.setImage(#imageLiteral(resourceName: "Calendar"), for: .normal)
    calendarButton.setTitle("", for: .normal)
    calendarButton.tintColor = UIColor.gray
    let widthConstraintCalendarButton = calendarButton.widthAnchor.constraint(equalToConstant: 20)
    let heightConstraintCalendarButton = calendarButton.heightAnchor.constraint(equalToConstant: 20)
    heightConstraintCalendarButton.isActive = true
    widthConstraintCalendarButton.isActive = true
    let leftbarButtonItem2 = UIBarButtonItem(customView: calendarButton)

    // CalendarDownButton
    let calendarDownButton = UIButton(type: .system)
    calendarDownButton.addTarget(self, action: #selector(calendarDown), for: .touchUpInside)
    calendarDownButton.setImage(#imageLiteral(resourceName: "CalendarDown"), for: .normal)
    calendarDownButton.setTitle("", for: .normal)
    calendarDownButton.tintColor = UIColor.gray
    let widthConstraintCalendarDownButton = calendarDownButton.widthAnchor.constraint(equalToConstant: 20)
    let heightConstraintCalendarDownButton = calendarDownButton.heightAnchor.constraint(equalToConstant: 20)
    heightConstraintCalendarDownButton.isActive = true
    widthConstraintCalendarDownButton.isActive = true
    let leftbarButtonItem3 = UIBarButtonItem(customView: calendarDownButton)


    self.navigationItem.leftBarButtonItems = [leftbarButtonItem1, leftbarButtonItem2, leftbarButtonItem3]

    self.title = "Teamplanner"
    
    NotificationCenter.default.addObserver(self, selector: #selector(userDefaultsDidChange), name: UserDefaults.didChangeNotification, object: nil)

//    v.refreshControl.addTarget(self, action: #selector(refresh), for: .valueChanged)
//    doSomething()
//
//    v.collectionView.dataSource = self
  }
    override func viewWillAppear(_ animated: Bool) {
            super.viewWillAppear(animated)
            NotificationCenter.default.addObserver(self, selector: #selector(userDefaultsDidChange), name: UserDefaults.didChangeNotification, object: nil)
            doSomething()
            
            v.refreshControl.addTarget(self, action: #selector(refresh), for: .valueChanged)
//            if #available(iOS 10.0, *) {
////                v.collectionView.prefetchDataSource = self
//            }
            v.collectionView.dataSource = self
            v.collectionView.delegate = self
    //        v.collectionView.prefetchDataSource = self
        }
  
  // MARK: Do something
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        NotificationCenter.default.removeObserver(self)
    }
    
    @objc func userDefaultsDidChange(){
        doSomething()
    }
  
        @objc func calendar() {
            
                toolBar = UIToolbar(frame: CGRect(x: 0, y: 0, width: self.view.frame.size.width, height: self.view.frame.size.height - (self.tabBarController?.tabBar.frame.height)!))

                   toolBar.barTintColor = UIColor.black
                   toolBar.tintColor = UIColor.white
                   toolBar.barStyle = UIBarStyle.blackTranslucent
                   toolBar.isTranslucent = true
                   toolBar.isUserInteractionEnabled = true
                   
                   let cancelButton = UIBarButtonItem(title: "Cancel", style: .plain, target: self, action: #selector(cancelDatePicker));
                   let spaceButton = UIBarButtonItem(barButtonSystemItem: UIBarButtonItem.SystemItem.flexibleSpace, target: nil, action: nil)
                    let doneButton = UIBarButtonItem(title: "Done", style: .done, target: self, action: #selector(donedatePicker));
                   toolBar.setItems([doneButton,spaceButton,cancelButton], animated: false)

                self.view.addSubview(toolBar)
            
                view.addSubview(MDate)
                   NSLayoutConstraint.activate([
                       MDate.centerYAnchor.constraint(equalTo: view.centerYAnchor, constant: 0),
                       MDate.centerXAnchor.constraint(equalTo: view.centerXAnchor, constant: 0),
                       MDate.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.7),
                       MDate.heightAnchor.constraint(equalTo: view.heightAnchor, multiplier: 0.4)
                   ])

                view.addSubview(Today)
                   Today.centerXAnchor.constraint(equalTo: view.centerXAnchor, constant: 0).isActive = true
                   Today.topAnchor.constraint(equalTo: MDate.bottomAnchor, constant: 20).isActive = true
        }
        
    @objc func yesplanPrefs(sender: AnyObject) {
        if let url = URL(string:UIApplication.openSettingsURLString) {
        if UIApplication.shared.canOpenURL(url) {
                    _ =   UIApplication.shared.open(url, options: [:], completionHandler: nil)
                }
            }
        }
    //    @State private var wakeUp = Date() // Only from iOS13.0
        // Datepicker:
    @objc func calendarUp(sender: AnyObject) {
        datePicker.date = Calendar.current.date(byAdding: .day, value: -14, to: datePicker.date)!
        doSomething()
        self.MDate.removeFromSuperview()
        self.toolBar.removeFromSuperview()
        }
        
    @objc func calendarDown(sender: AnyObject) {
        datePicker.date = Calendar.current.date(byAdding: .day, value: 14, to: datePicker.date)!
        doSomething()
        self.MDate.removeFromSuperview()
        self.toolBar.removeFromSuperview()
        }
      
    @objc func donedatePicker(){
        doSomething()
        self.MDate.removeFromSuperview()
        self.toolBar.removeFromSuperview()
    }

    @objc func cancelDatePicker(){       self.datePicker.removeFromSuperview()
        self.toolBar.removeFromSuperview()
    }
  
  //@IBOutlet weak var nameTextField: UITextField!
    @objc private func refresh() {
        doSomething()
    }
    
   func doSomething() {
     
     let formatter = DateFormatter()
     formatter.dateFormat = "yyyy-MM-dd"
     
     let request = TeamplannerTab.Something.Request(
         startdate: "\(formatter.string(from: datePicker.date))",
         enddate: "\(formatter.string(from: Calendar.current.date(byAdding: .day, value: 14, to: datePicker.date)!))"
     )
     interactor?.doSomething(request: request)
   }
  
  func displaySomething(viewModel: TeamplannerTab.Something.ViewModel)
  {
    sections = viewModel.sections
    
    if viewModel.error != nil {
    let alert = UIAlertController(title: "Alert", message: "\(viewModel.error!)", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Cancel", style: .default, handler: nil))
        alert.addAction(UIAlertAction(title: "Retry", style: .cancel, handler: { action in
            self.doSomething()
        }))
    self.present(alert, animated: true)
    }
    
    self.v.collectionView.reloadData()
    self.v.refreshControl.endRefreshing()
  }
}
