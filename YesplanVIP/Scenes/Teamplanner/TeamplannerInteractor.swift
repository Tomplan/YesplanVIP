//
//  TeamplannerInteractor.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 13/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TeamplannerTabBusinessLogic
{
  func doSomething(request: TeamplannerTab.Something.Request)
}

protocol TeamplannerTabDataStore
{
  //var name: String { get set }
}

class TeamplannerTabInteractor: TeamplannerTabBusinessLogic, TeamplannerTabDataStore
{
  var presenter: TeamplannerTabPresentationLogic?
  var worker: TeamplannerTabWorker?

    
  //var name: String = ""
  
  // MARK: Do something
  
  func doSomething(request: TeamplannerTab.Something.Request)
  {
    var resourceSchedulesArray: [ResourceScheduleFromTo] = []
    var resourcebookingsArray: [Resourcebooking] = []
    var error: String? = ""
    
//    print("resourcebookingsArray: ", resourcebookingsArray)
    worker = TeamplannerTabWorker()
    
    worker?.getResourceSchedulesFromTo("resource:name:tom slegers")
        .map({$0.data})
            .execute(onSuccess: { items in
//                print(items)
//                for item in items {
//                    if let schedules = item.schedules {
//                    for schedule in schedules {
//                        print(schedule.scheduletype)
//                        }
//                    }
//resourceSchedulesArray.append(item)
                    resourceSchedulesArray = items
//                }
                let response = TeamplannerTab.Something.Response(
                    resourceSchedules: resourceSchedulesArray
//                    resourcebookings: resourcebookingsArray
                    ,error: error
                    )
                self.presenter?.presentSomething(response: response)
                }, onFailure: { error in
                            print(error)
                    let response = TeamplannerTab.Something.Response(
                        resourceSchedules: resourceSchedulesArray
                        //                    resourcebookings: resourcebookingsArray
                        ,error: error.localizedDescription
                    )
                    self.presenter?.presentSomething(response: response)
                })
    
//
//    worker?.getResourcebookings("resourceuse:name:\(UserDefaults.standard.string(forKey: "todo_user")!) resourceuse:date:#today + resourceuse:date:#next6days") // + resourceuse:date:#next6days
//        .map({$0.data})
//        .execute(onSuccess: { items in
//            for item in items {
//                resourcebookingsArray.append(item)
//                }
//                let response = TeamplannerTab.Something.Response(
//                    resourcebookings: resourcebookingsArray
//                    ,error: error
//                )
//
//                self.presenter?.presentSomething(response: response)
//        }, onFailure: { error in
//            print(error)
//        })
    }

}
