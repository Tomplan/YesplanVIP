//
//  TeamplannerInteractor.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 13/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PromiseKit

protocol TeamplannerTabBusinessLogic
{
  func doSomething(request: TeamplannerTab.Something.Request)
}

protocol TeamplannerTabDataStore
{
  //var name: String { get set }
}

class TeamplannerTabInteractor: TeamplannerTabBusinessLogic, TeamplannerTabDataStore
{
    var presenter: TeamplannerTabPresentationLogic?
    var worker: TeamplannerTabWorker?
    var dict: [[String? : [Schedules]]] = []
  
  // MARK: Do something
  
  func doSomething(request: TeamplannerTab.Something.Request)
  {
    worker = TeamplannerTabWorker()
    let formatter = DateFormatter()
    formatter.dateFormat = "yyyy-MM-dd"
    
    let path = "resource:name:\(String(describing: UserDefaults.standard.string(forKey: "todo_user")!))"
    var queryItems = [String:String]()
    
//    let dateInWeek = Date()//7th June 2017

    NSTimeZone.resetSystemTimeZone()
    let calendar = Calendar.current
//    calendar.timeZone = .autoupdatingCurrent
    
    let dayOfWeek = calendar.component(.weekday, from: request.startdate) - 1
    let weekdays = calendar.range(of: .weekday, in: .weekOfYear, for: request.startdate)!
    let days = (weekdays.lowerBound ..< weekdays.upperBound)
        .compactMap { calendar.date(byAdding: .day, value: $0 - dayOfWeek, to: request.startdate) }
//
//    print(days)
    
    queryItems = ["from": "\(formatter.string(from: days.first!))", "to" : "\(formatter.string(from: days.last!))"]

    // Replace the hour (time) of both dates with 00:00
//    let date1 = calendar.startOfDay(for: request.startdate)
//    let date2 = calendar.startOfDay(for: request.enddate)

//    let components = calendar.dateComponents([.day], from: request.startdate, to: request.enddate)
    
//    print("components: ", components.day)
    
    worker?.getResourcesSchedules(path: path, query: queryItems)
//    .tap { items in
//        print("items: ", items) }
            .map { $0.data
            } .get { fromTos in
                self.dict = fromTos.compactMap { [$0.resource.name : $0.schedules]}
//            }.tap { result in print("r", result)
            }.flatMapValues { item  in return item.schedules.compactMap { $0.id }
//            }.tap { result in print("2", result)
            }.thenMap { item -> Promise<Resourcebooking> in (self.worker?.getResourcebookingId(item)!)!
//            }.tap { result in print("3", result)
            }.done { result in
//                for i in 1...components.day! {
//                    self.dict.append(["\(formatter.string(from: Calendar.current.date(byAdding: .day, value: i - 1, to: request.startdate)!))":[]])
//                }
//                print("selfDict:", self.dict)
                let response = TeamplannerTab.Something.Response(
                    startdate: request.startdate ,
                    enddate: request.enddate,
                    resourcebookings: result,
                    schedules: self.dict,
                    error: nil
                )
                self.presenter?.presentSomething(response: response)

            }.catch { error in
                let alert = UIAlertController(title: "Error", message: error.localizedDescription, preferredStyle: .alert)
                alert.addAction(UIAlertAction(title: "Dismiss", style: .default, handler: nil))
//                self.present(alert, animated: true, completion: nil)
        }
    }
}
