//
//  TeamplannerInteractor.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 13/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PromisedFuture

protocol TeamplannerTabBusinessLogic
{
  func doSomething(request: TeamplannerTab.Something.Request)
}

protocol TeamplannerTabDataStore
{
  //var name: String { get set }
}

class TeamplannerTabInteractor: TeamplannerTabBusinessLogic, TeamplannerTabDataStore
{
  var presenter: TeamplannerTabPresentationLogic?
  var worker: TeamplannerTabWorker?
    
  //var name: String = ""
  
  // MARK: Do something
  
  func doSomething(request: TeamplannerTab.Something.Request)
  {
//    var resourceSchedulesArray: [ResourceSchedulesFromTo] = []
//    var resourcebookingsArray: [Resourcebooking] = []
    var resourcebookingArray: [Resourcebooking] = []
//    var scheduleArray: [Schedules] = []
//    let error: String? = ""
    
//    print("resourcebookingsArray: ", resourcebookingsArray)
    worker = TeamplannerTabWorker()
    
    worker?.getResourcesSchedulesFromTo("resource:name:\(String(describing: UserDefaults.standard.string(forKey: "todo_user")!))")
        .andThen(((worker?.getSchedules)!))
    .execute(onSuccess: { items in
//        print("items: ", items)
        for item in items! {
            self.worker?.getResourcebookingId(item)
            .execute(onSuccess: { item in
                print("item: ", item)
                resourcebookingArray.append(item)
            })
        }
        
    })
//    .execute(onSuccess: { items in
//        print(items)
//    }, onFailure: { error in
//        print(error)
//    })
//            worker?.getResourcesSchedulesFromTo("resource:team:1203")
//        .andThen((worker?.makeSchedulesArray)!)
//        .andThen((worker?.makeStructs)!)
//        .execute(onSuccess: { item in
////            print(item)
//            let response = TeamplannerTab.Something.Response(
//                sections: item,
//                error: nil)
//            self.presenter?.presentSomething(response: response)
//        }, onFailure: { error in
//            print(error)
//        })
////   **********************************
//
//        .andThen((worker?.makeSchedulesArray)!)
////                .andThen(worker?.getNextResourcesSchedulesFromTo)
//        .execute(onSuccess:  { item in
////            print(item)
//            let response = TeamplannerTab.Something.Response(
//                stringSchedules: item,
//                error: nil)
//            self.presenter?.presentSomething(response: response)
////            print(item)
//        }, onFailure: { error in
//            print(error)
//        })
//
//
    }
}
////// ***************************
//            .execute(onSuccess: { resourcesSchedulesFromTo in
////                print("pagination: ", resourcesSchedulesFromTo.pagination)
////                print("data: ", resourcesSchedulesFromTo.data)
//
//            for resourceSchedulesFromTo in resourcesSchedulesFromTo.data {
//                if let schedules = resourceSchedulesFromTo.schedules {
//                    for schedule in schedules {
//                        switch schedule {
//                        case .shift(let x):
//                            scheduleArray.append(schedule)
//                        case .scheduleBreak(let x):
//                            scheduleArray.append(schedule)
//                        case .lock(let x):
//                            scheduleArray.append(schedule)
//                        case .schedule(let x):
//                                if let resourcebookingId = schedule.id {
//                                    self.worker?.getResourcebookingId(resourcebookingId)
//                                        .execute(onSuccess: { item in
//                                            resourcebookingArray.append(item)
////                                            print("resourcebookingArray: ", resourcebookingArray)
//                                        }, onFailure: { error in
//                                            print("error")
//                                        })
//
//                                }
//                            }
//                        }
//                    print("scheduleArray: ", scheduleArray)
////                        if let resourcebookingId = schedule.id {
////                            print(resourcebookingId)
////                        self.worker?.getResourcebookingId(resourcebookingId)
////                            .execute(onSuccess: { items in
////                                print(items)
////                            }, onFailure: { error in
////                                print("error")
////                            })
////                        }
////                    }
//                }
//            }
//
////                    if let schedules = resourceScheduleFromTo.schedules {
////                    for schedule in schedules {
////                        print(schedules)
////                        worker?.getResourcebookingId(schedule)
//
//
//
////                        }
////                    }
////                }
////                    resourceSchedulesArray = items
////                let response = TeamplannerTab.Something.Response(
////                    resourceSchedules: resourceSchedulesArray
////                    ,error: error
////                    )
////                self.presenter?.presentSomething(response: response)
//                }, onFailure: { error in
//                            print(error)
////                    let response = TeamplannerTab.Something.Response(
////                        resourceSchedules: resourceSchedulesArray
////                        ,error: error.localizedDescription
////                    )
////                    self.presenter?.presentSomething(response: response)
//                })
//    }
//
//}
