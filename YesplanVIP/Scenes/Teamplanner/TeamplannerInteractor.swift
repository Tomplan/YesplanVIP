//
//  TeamplannerInteractor.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 13/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TeamplannerTabBusinessLogic
{
  func doSomething(request: TeamplannerTab.Something.Request)
}

protocol TeamplannerTabDataStore
{
  //var name: String { get set }
}

class TeamplannerTabInteractor: TeamplannerTabBusinessLogic, TeamplannerTabDataStore
{
  var presenter: TeamplannerTabPresentationLogic?
  var worker: TeamplannerTabWorker?
    var fetchedResourcebookings: Resourcebookings = Resourcebookings()
    var fetchedGroups: Groups = Groups()

    var resourcebookingsArray: [Resourcebooking] = [Resourcebooking]()
    var yesplan: Yesplan = Yesplan()

  //var name: String = ""
  
  // MARK: Do something
  
  func doSomething(request: TeamplannerTab.Something.Request)
  {
    worker = TeamplannerTabWorker()
//    worker?.doSomeWork()
    
    yesplan.getAll(fetchedResourcebookings, query: "resourceuse:date:#today  + resourceuse:date:#next10days resourceuse:name:marc") // resourceuse:team:1203
        .then { result in
            for resourcebooking in result.data {
                switch resourcebooking {
                case .instantiableResourceUse(let x):
                    print(x)
                    switch x.resource! {
                    case .bulkResource(let y):
                        print("bulk")
                        if y.type == "Human" {
                            self.resourcebookingsArray.append(resourcebooking)
                        }
                    case .instantiableResource(let y):
                        print("instantiableResource")
                        if y.type == "Human" {
                            self.resourcebookingsArray.append(resourcebooking)
                        }
                    case .adHocResource(let y):
                        print("adHocResource")
                        if y.type == "Human" {
                            self.resourcebookingsArray.append(resourcebooking)
                        }
                    case .resourceSet(let y):
                        print("resourceSet")
                        if y.type == "Human" {
                            self.resourcebookingsArray.append(resourcebooking)
                        }
                    }
//                    if x.resource?.type == "Human" {
//                        self.resourcebookingsArray.append(resourcebooking)
//                    }
                case .instantiableResourceUseGroup(let x):
                    print(x)
//                    switch x.resource {
//                    case .bulkResource(let x):
//                        print("bulk")
//                    case .instantiableResource(let x):
//                        print("bulk")
//                    case .adHocResource(let x):
//                        print("bulk")
//                    case .resourceSet(let x):
//                        print("bulk")
//                    }
//                    if x.resource?.type == "Human" {
//                        self.resourcebookingsArray.append(resourcebooking)
//                    }
                }
            }
        }
        .finally {
            
            let response = TeamplannerTab.Something.Response(
                resourcebookings: self.resourcebookingsArray
            )
            self.presenter?.presentSomething(response: response)
    }
  }
}

