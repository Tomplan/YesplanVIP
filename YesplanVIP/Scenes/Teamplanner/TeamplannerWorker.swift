//
//  TeamplannerWorker.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 13/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PromisedFuture

class TeamplannerTabWorker
{
    func getResourcesSchedulesFromTo(_ path: String) -> Future<ResourcesSchedulesFromTo> {
        return Future(operation: { completion in
            APIClient.resourcesSchedulesFromTo("\(path)")
                .execute(onSuccess: { items in
                    completion(.success(items))
                }, onFailure: { error in
                    completion(.failure(error))
                })
        })
    }
    
    func getSchedules(_ resourcesSchedulesFromTo: ResourcesSchedulesFromTo) -> Future<[String]?> {
        var absents: [Schedules] = []
        var presents: [String] = []

        for resourceSchedulesFromTo in resourcesSchedulesFromTo.data {
//            print("*: ", resourceSchedulesFromTo)
            if let schedules = resourceSchedulesFromTo.schedules {
//                print("*: ", schedules)
                for schedule in schedules {
                    switch schedule {
                    case .shift(_):
                        absents.append(schedule)
                    case .scheduleBreak(_):
                        absents.append(schedule)
                    case .lock(_):
                        absents.append(schedule)
                    case .schedule(let x):
                        presents.append(x.resourcebooking.id!)
                    }
                }
            }
        }
        return Future(value: presents)
    }
    
    func getResourcebookingId(_ id: String) -> Future<Resourcebooking> {
        return Future(operation: { completion in
            APIClient.resourcebookingId(id)
                .execute(onSuccess: { item in
                    completion(.success(item))
                }, onFailure: { error in
                    completion(.failure(error))
                })
            })
        }

    func makeSchedulesArray(resourcesSchedulesFromTo: ResourcesSchedulesFromTo) -> Future<[String? : [Schedules]]> {
        var schedulesDict = [String? : [Schedules]]()
        for resourceSchedulesFromTo in resourcesSchedulesFromTo.data {
            var schedulesArray = [Schedules]()
            if let schedules = resourceSchedulesFromTo.schedules {
                for schedule in schedules {
                    schedulesArray.append(schedule)
                }
                schedulesDict[resourceSchedulesFromTo.resource?.name] = schedulesArray
            }
        }
//        print(schedulesDict)
        return Future(value: schedulesDict)
    }
    
//    func makeStructs(schedulesDict: [String? : [Schedules]]) -> Future<[TeamplannerTab.Something.Response.Section]> {
//        var structs = [TeamplannerTab.Something.Response.Section]()
//        for (_, value) in schedulesDict {
//            if value.count == 0 {
//            } else
//            {
//                var partrows: [TeamplannerTab.Something.Response.Section.Row] = []
//                for i in 0 ..< value.count {
//                    var partrow = TeamplannerTab.Something.Response.Section.Row(schedules: nil, resourcebooking: nil)
//                    let partrowItem = value[i]
//                    switch partrowItem {
//                    case .shift(_):
//                        partrow = TeamplannerTab.Something.Response.Section.Row(schedules: partrowItem, resourcebooking: nil)
//                    case .lock(_):
//                        partrow = TeamplannerTab.Something.Response.Section.Row(schedules: partrowItem, resourcebooking: nil)
//                    case .scheduleBreak(_):
//                        partrow = TeamplannerTab.Something.Response.Section.Row(schedules: partrowItem, resourcebooking: nil)
//                    case .schedule(let x):
//                        if let id = x.resourcebooking.id {
//                        getResourcebookingId(id)
//                            .execute(completion: { result in
//                                switch result {
//                                case .success(let y):
//                                    partrow = TeamplannerTab.Something.Response.Section.Row(schedules: nil, resourcebooking: y)
//                                    print("partrow: ", partrow)
//                                    partrows.append(partrow)
//                                case .failure(let y):
//                                    print("error: ", y)
//                                }
//                            })
////                              partrow = TeamplannerTab.Something.Response.Section.Row(schedules: nil, resourcebooking: item)
////                            })
////                        partrow = TeamplannerTab.Something.Response.Section.Row(schedules: nil, resourcebooking: partrowItem)
//                        }
//                    }
//                    partrows.append(partrow)
//                }
//                for i in 0 ..< value.count {
//                    var rows = [TeamplannerTab.Something.Response.Section.Row]()
//                    let header = value[i].start.convertDateString(dateFormat: "yyyy-MM-dd")!
//                    
//                    for i in 0 ..< value.count where value[i].start.convertDateString(dateFormat: "yyyy-MM-dd")! == header {
//                        let row = partrows[i]
//                        rows.append(row)
//                    }
//                    let item = TeamplannerTab.Something.Response.Section(header: header, rows: rows)
//                    if structs.contains(where: { $0.header == header }) == false {
//                        structs.append(item) }
//                }
//                
////                let response = TeamplannerTab.Something.Response(
////                    sections: structs
////                    ,error: nil
////                )
////                let response = TeamplannerTab.Something.Response(
////                    sections: structs
////                    ,error: nil
////                )
////                self.presenter?.presentSomething(response: response)
//                
//            }
//        }
//        return Future(value: structs)
//    }
//    
//    func makeSchedulesStructs(resourcesSchedulesFromTo: ResourcesSchedulesFromTo) -> Future<[TeamplannerTab.Something.Response.Section]> {
//        var sections = [TeamplannerTab.Something.Response.Section]()
//        for resourceSchedulesFromTo in resourcesSchedulesFromTo.data {
//            var schedulesArray = [Schedules]()
//            if let schedules = resourceSchedulesFromTo.schedules {
//                for schedule in schedules {
////                    schedulesArray.append(schedule)
//                    
//                }
//                
////                schedulesDict[resourceSchedulesFromTo.resource?.name] = schedulesArray
//            }
//        }
//        
//        return Future(value: schedulesDict)
//    }
        
        
        
//        
//        if let next = resourcesSchedulesFromTo.pagination.next  {
//            print(next)
//            if let url = URL(string: next) {
//                print("absoluteString: ", url.absoluteString)
//                print("absoluteURL: ", url.absoluteURL)
//                print("baseURL: ", url.baseURL)
//                print("path: ", url.path)
//                print("query: ", url.query)
//            getNextResourcesSchedulesFromTo(url: url)
//                .execute(onSuccess: { dfg in
////                    print(dfg)
//                    
//                }, onFailure: { error in
//                    print(error)
//                })
//            }
//        } else {
//            return Future(value: schedulesDict)
//        }
//        return Future(value: schedulesDict)
//    }
    
    func getNextResourcesSchedulesFromTo(url: URL) -> Future<ResourcesSchedulesFromTo> {
        print("getNextResourcesSchedulesFromTo")
        return Future(operation: { completion in
            APIClient.nextResourcesSchedulesFromTo(url)
                //                .map({$0})
                .execute(onSuccess: { items in
//                    print("getNextResourcesSchedulesFromToitems: ", items)
                    completion(.success(items))
                }, onFailure: { error in
                    print(error)
                    completion(.failure(error))
                })
        })
        
    }
    
//    func groupResourecbookingsByStartdate(resourcebookings: Resourcebookings) -> [String:[Resourcebooking]] {
//        for resourcebooking in resourcebookings.data {
//            switch resourcebooking {
//            case .instantiableResourceUse(let x):
//                if x.resource?.type == "Human" {
//                    fetchedResourcebookings[x.start!] = resourcebooking
//                }
//            case .instantiableResourceUseGroup(let _):
//                print("neeije")
////                if x.resource?.type == "Human" {
//////                    fetchedResourcebookings[x.start!] = resourcebooking
//////                }
//            }
//        }
////        let dictResourcebookings = Dictionary(grouping: fetchedResourcebookings, by: { $0.key })
////        return dictResourcebookings
//    }
}
