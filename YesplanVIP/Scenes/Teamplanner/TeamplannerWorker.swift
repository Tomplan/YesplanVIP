//
//  TeamplannerWorker.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 13/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PromisedFuture

class TeamplannerTabWorker
{
//    func getResourcebookings(_ path: String) -> Future<Resourcebookings> {
//        return Future(operation: { completion in
//            APIClient.resourcebookings("\(path)")
//                .map({$0})
//                .execute(onSuccess: { items in
//                    completion(.success(items))
//                }, onFailure: { error in
//                    completion(.failure(error))
//                })
//        })
//    }
    
        

//    func getResources(_ path: String) -> Future<Resources> {
//        return Future(operation: { completion in
//            APIClient.resources("\(path)")
//                .map({$0})
//                .execute(onSuccess: { items in
//                    completion(.success(items))
//                }, onFailure: { error in
//                    completion(.failure(error))
//                })
//        })
//    }
    
    func getResourcesSchedulesFromTo(_ path: String) -> Future<ResourcesSchedulesFromTo> {
        return Future(operation: { completion in
            APIClient.resourcesSchedulesFromTo("\(path)")
                .execute(onSuccess: { items in
                    completion(.success(items))
                }, onFailure: { error in
                    completion(.failure(error))
                })
        })
    }
    
    func getResourcebookingId(_ id: String) -> Future<Resourcebooking> {
        return Future(operation: { completion in
            APIClient.resourcebookingId(id)
                .execute(onSuccess: { item in
                    completion(.success(item))
                }, onFailure: { error in
                    completion(.failure(error))
                })
            })
        }

    func makeSchedulesArray(resourcesSchedulesFromTo: ResourcesSchedulesFromTo) -> Future<[String? : [Schedules]]> {
        var schedulesDict = [String? : [Schedules]]()
        for resourceSchedulesFromTo in resourcesSchedulesFromTo.data {
            var schedulesArray = [Schedules]()
            if let schedules = resourceSchedulesFromTo.schedules {
                for schedule in schedules {
                    schedulesArray.append(schedule)
                }
                schedulesDict[resourceSchedulesFromTo.resource?.name] = schedulesArray
            }
        }
//        
//        if let next = resourcesSchedulesFromTo.pagination.next  {
//            print(next)
//            if let url = URL(string: next) {
//                print("absoluteString: ", url.absoluteString)
//                print("absoluteURL: ", url.absoluteURL)
//                print("baseURL: ", url.baseURL)
//                print("path: ", url.path)
//                print("query: ", url.query)
//            getNextResourcesSchedulesFromTo(url: url)
//                .execute(onSuccess: { dfg in
////                    print(dfg)
//                    
//                }, onFailure: { error in
//                    print(error)
//                })
//            }
//        } else {
//            return Future(value: schedulesDict)
//        }
        return Future(value: schedulesDict)
    }
    
    func getNextResourcesSchedulesFromTo(url: URL) -> Future<ResourcesSchedulesFromTo> {
        print("getNextResourcesSchedulesFromTo")
        return Future(operation: { completion in
            APIClient.nextResourcesSchedulesFromTo(url)
                //                .map({$0})
                .execute(onSuccess: { items in
//                    print("getNextResourcesSchedulesFromToitems: ", items)
                    completion(.success(items))
                }, onFailure: { error in
                    print(error)
                    completion(.failure(error))
                })
        })
        
    }
    
//    func groupResourecbookingsByStartdate(resourcebookings: Resourcebookings) -> [String:[Resourcebooking]] {
//        for resourcebooking in resourcebookings.data {
//            switch resourcebooking {
//            case .instantiableResourceUse(let x):
//                if x.resource?.type == "Human" {
//                    fetchedResourcebookings[x.start!] = resourcebooking
//                }
//            case .instantiableResourceUseGroup(let _):
//                print("neeije")
////                if x.resource?.type == "Human" {
//////                    fetchedResourcebookings[x.start!] = resourcebooking
//////                }
//            }
//        }
////        let dictResourcebookings = Dictionary(grouping: fetchedResourcebookings, by: { $0.key })
////        return dictResourcebookings
//    }
}
