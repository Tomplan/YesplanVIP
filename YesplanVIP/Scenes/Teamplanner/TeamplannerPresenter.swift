//
//  TeamplannerPresenter.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 13/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PromisedFuture

protocol TeamplannerTabPresentationLogic
{
  func presentSomething(response: TeamplannerTab.Something.Response)
}

class TeamplannerTabPresenter: TeamplannerTabPresentationLogic
{
    
    
  weak var viewController: TeamplannerTabDisplayLogic?
    var scheduleType = ""
    var date = ""
    var start = ""
    var end = ""
    var eventName = ""
    var role = ""
    var error: String?
    
    var resourcebookingDispls: Set<TeamplannerTab.Something.ViewModel.Displ> = []
    var resourcebookings: Set<TeamplannerTab.Something.ViewModel.Displ> = []
    var dictResourcebookings: [String:[TeamplannerTab.Something.ViewModel.Displ]] = [:]
  // MARK: Do something

//    func insert(_ myschedules: [ResourceScheduleFromTo]) -> Future<Set<TeamplannerTab.Something.ViewModel.Displ>> {
//        for resourceSchedule in myschedules {
//
//        }
//        return
//    }
    
  func presentSomething(response: TeamplannerTab.Something.Response)
  {
    resourcebookingDispls = []
    resourcebookings = []
    // first open Array of ResourceSchedulesFromTo
        for resourceSchedule in response.resourceSchedules {
            // foreach ResourceSchedulesFromTo, open Array of Schedules
            if let schedules = resourceSchedule.schedules {
            for schedule in schedules {
                schedule.eventName.execute(onSuccess: { result in
                    var item: TeamplannerTab.Something.ViewModel.Displ = TeamplannerTab.Something.ViewModel.Displ(
                        date: schedule.date
                        , scheduleType: schedule.scheduletype
                        , start: schedule.start
                        , end: schedule.end
                        , eventName: self.eventName
                    )
                    if let name = result {
                    self.eventName = name
                         item = TeamplannerTab.Something.ViewModel.Displ(
                            date: schedule.date
                            , scheduleType: schedule.scheduletype
                            , start: schedule.start
                            , end: schedule.end
                            , eventName: self.eventName
                        )
                    } else {
                         item = TeamplannerTab.Something.ViewModel.Displ(
                            date: schedule.date
                            , scheduleType: schedule.scheduletype
                            , start: schedule.start
                            , end: schedule.end
                            , eventName: nil
                        )
                    }
                    self.resourcebookingDispls.insert(item)
//                    self.dictResourcebookings = Dictionary(grouping: self.resourcebookingDispls, by: { $0.date })
//                    var items: [String:[TeamplannerTab.Something.ViewModel.Displ]] = [:]
//                                    for (key, value) in self.dictResourcebookings {
//                                        let valueSorted = value.sorted{ $0.start <  $1.start }
//                                        items[key] = valueSorted
//                                    }
//
//                                    for (key, value) in items {
//                                        self.resourcebookings.insert(TeamplannerTab.Something.ViewModel.DisplayedResourcebooking(date: key, resourcebookings: value))
//                                    }
                                    let viewModel = TeamplannerTab.Something.ViewModel(
//                                        displayedResourcebookings: self.resourcebookingDispls
                                        toVC: self.resourcebookingDispls
                                        , error: self.error
                                    )
                                    //            print(self.resourcebookings)
                                    self.viewController?.displaySomething(viewModel: viewModel)
//                    print(self.resourcebookingDispls)
                })
            }
//                schedule.eventName.execute(completion: { result in
//                    switch result {
//                    case .success(let x):
//                        if let y = x {
//                        self.eventName = y
//                        }
//                    case .failure(let x):
//                        print(x)
//                    }
//                })
//                let item: TeamplannerTab.Something.ViewModel.Displ = TeamplannerTab.Something.ViewModel.Displ(
//                    date: schedule.date
//                    , scheduleType: schedule.scheduletype
//                    , start: schedule.start
//                    , end: schedule.end
//                    , eventName: self.eventName
//                )
//                self.resourcebookingDispls.insert(item)
                
//    self.dictResourcebookings = Dictionary(grouping: self.resourcebookingDispls, by: { $0.date })
//    print("1:" , dictResourcebookings)
    //                var items: [String:[TeamplannerTab.Something.ViewModel.Displ]] = [:]
    //                for (key, value) in self.dictResourcebookings {
    //                    let valueSorted = value.sorted{ $0.start <  $1.start }
    //                    items[key] = valueSorted
    //                }
    //
    //                for (key, value) in items {
    //                    self.resourcebookings.insert(TeamplannerTab.Something.ViewModel.DisplayedResourcebooking(date: key, resourcebookings: value))
    //                }
    //                let viewModel = TeamplannerTab.Something.ViewModel(
    //                    displayedResourcebookings: self.resourcebookings
    //                    , error: self.error
    //                )
    //                //            print(self.resourcebookings)
    //                self.viewController?.displaySomething(viewModel: viewModel)
            }}
    }
}

//                schedule.eventName
//                    .andThen(schedule)
//                if let name = result {
//                    print("name")
//                    item = TeamplannerTab.Something.ViewModel.Displ(
//                        date: schedule.date
//                        ,scheduleType: schedule.scheduletype
//                        ,start: schedule.start
//                        ,end: schedule.end
//                        ,eventName: name
//                    )
//                    self.resourcebookingDispls.insert(item)
//
//                    //                            print("2: ", self.resourcebookingDispls)
//                } else {
//                    item = TeamplannerTab.Something.ViewModel.Displ(
//                        date: schedule.date
//                        ,scheduleType: schedule.scheduletype
//                        ,start: schedule.start
//                        ,end: schedule.end
//                        ,eventName: nil
//                    )
//                    self.resourcebookingDispls.insert(item)
//                }
//                print("1: ", self.resourcebookingDispls)
//                }
//                , onFailure: {error in
//                    print("error")
//                    //                            let item = TeamplannerTab.Something.ViewModel.Displ(
//                    //                                date: schedule.date
//                    //                                ,scheduleType: schedule.scheduletype
//                    //                                ,start: schedule.start
//                    //                                ,end: schedule.end
//                    //                                ,eventName: "schedule.eventName"
//                    //                            )
//                    //                            self.resourcebookingDispls.insert(item)
//                })
//                self.dictResourcebookings = Dictionary(grouping: self.resourcebookingDispls, by: { $0.date })
//                print(dictResourcebookings)
//                var items: [String:[TeamplannerTab.Something.ViewModel.Displ]] = [:]
//                for (key, value) in self.dictResourcebookings {
//                    let valueSorted = value.sorted{ $0.start <  $1.start }
//                    items[key] = valueSorted
//                }
//
//                for (key, value) in items {
//                    self.resourcebookings.insert(TeamplannerTab.Something.ViewModel.DisplayedResourcebooking(date: key, resourcebookings: value))
//                }
//                let viewModel = TeamplannerTab.Something.ViewModel(
//                    displayedResourcebookings: self.resourcebookings
//                    , error: self.error
//                )
//                //            print(self.resourcebookings)
//                self.viewController?.displaySomething(viewModel: viewModel)
//
//            })

//    }}
