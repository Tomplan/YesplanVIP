//
//  TeamplannerPresenter.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 13/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PromisedFuture

protocol TeamplannerTabPresentationLogic
{
  func presentSomething(response: TeamplannerTab.Something.Response)
}

class TeamplannerTabPresenter: TeamplannerTabPresentationLogic
{
  weak var viewController: TeamplannerTabDisplayLogic?
    
    var DateAndSchedulesArray = [TeamplannerTab.Something.ViewModel.Section]()
    // MARK: Do something
    
  func presentSomething(response: TeamplannerTab.Something.Response)
  {
    for stringSchedule in response.stringSchedules {
        if stringSchedule.value.count == 0 {
        } else
        {
            var partrows: [TeamplannerTab.Something.ViewModel.Section.Row] = []
            for i in 0 ..< stringSchedule.value.count {
                var partrow = TeamplannerTab.Something.ViewModel.Section.Row(schedules: nil, resourcebooking: nil)
                let partrowItem = stringSchedule.value[i]
                switch partrowItem {
                case .shift(_):
                    partrow = TeamplannerTab.Something.ViewModel.Section.Row(schedules: partrowItem, resourcebooking: nil)
                case .lock(_):
                    partrow = TeamplannerTab.Something.ViewModel.Section.Row(schedules: partrowItem, resourcebooking: nil)
                case .scheduleBreak(_):
                    partrow = TeamplannerTab.Something.ViewModel.Section.Row(schedules: partrowItem, resourcebooking: nil)
                case .schedule(_):
                    partrow = TeamplannerTab.Something.ViewModel.Section.Row(schedules: nil, resourcebooking: partrowItem)
                }
                partrows.append(partrow)
            }
            for i in 0 ..< stringSchedule.value.count {
                var rows = [TeamplannerTab.Something.ViewModel.Section.Row]()
                let header = stringSchedule.value[i].start.convertDateString(dateFormat: "yyyy-MM-dd")!

                    for i in 0 ..< stringSchedule.value.count where stringSchedule.value[i].start.convertDateString(dateFormat: "yyyy-MM-dd")! == header {
                        let row = partrows[i]
                        rows.append(row)
                    }
                let item = TeamplannerTab.Something.ViewModel.Section(header: header, rows: rows)
                if DateAndSchedulesArray.contains(where: { $0.header == header }) == false {
                    DateAndSchedulesArray.append(item) }
            }

            let viewModel = TeamplannerTab.Something.ViewModel(
                    sections: DateAndSchedulesArray
                    ,error: nil
                    )
            self.viewController?.displaySomething(viewModel: viewModel)
            }
        }
    }
}
////    ************************************************** oldway
//    for resourceSchedule in response.resourceSchedules {
//        if let schedules = resourceSchedule.schedules {
//        for schedule in schedules {
//            schedule.eventName.execute(onSuccess: { result in
//                var item: TeamplannerTab.Something.ViewModel.Displ = TeamplannerTab.Something.ViewModel.Displ(
//                    date: schedule.date
//                    , scheduleType: schedule.scheduletype
//                    , start: schedule.start
//                    , end: schedule.end
//                    , eventName: ""
//                )
//                if let name = result {
//                    item = TeamplannerTab.Something.ViewModel.Displ(
//                    date: schedule.date
//                    , scheduleType: schedule.scheduletype
//                    , start: schedule.start
//                    , end: schedule.end
//                    , eventName: name
//                    )
//                } else {
//                    item = TeamplannerTab.Something.ViewModel.Displ(
//                    date: schedule.date
//                    , scheduleType: schedule.scheduletype
//                    , start: schedule.start
//                    , end: schedule.end
//                    , eventName: nil
//                    )
//                }
//                resourcebookingDispls.insert(item)
//                dictResourcebookings = Dictionary(grouping: resourcebookingDispls, by: { $0.date })
//                var items: [String:[TeamplannerTab.Something.ViewModel.Displ]] = [:]
//                for (key, value) in dictResourcebookings {
//                    let valueSorted = value.sorted{ $0.start <  $1.start }
//                    items[key] = valueSorted
//                }
//                resourcebookings = []
//                for (key, value) in items {
//                    resourcebookings.insert(TeamplannerTab.Something.ViewModel.DisplayedResourcebooking(date: key, resourcebookings: value))
//                }
//                let viewModel = TeamplannerTab.Something.ViewModel(
//                    displayedResourcebookings: resourcebookings
//                    ,error: error
//                    )
//                self.viewController?.displaySomething(viewModel: viewModel)
//                })
//            }
//        }}


