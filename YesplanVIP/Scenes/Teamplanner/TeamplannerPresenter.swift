//
//  TeamplannerPresenter.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 13/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PromisedFuture

protocol TeamplannerTabPresentationLogic
{
  func presentSomething(response: TeamplannerTab.Something.Response)
}

class TeamplannerTabPresenter: TeamplannerTabPresentationLogic
{
    
    
  weak var viewController: TeamplannerTabDisplayLogic?
    var scheduleType = ""
    var date = ""
    var start = ""
    var end = ""
    var eventName = ""
    var role = ""
    var error: String?
//    var resourcebookingDispls: [TeamplannerTab.Something.ViewModel.Displ] = []
    var resourcebookingDispls: Set<TeamplannerTab.Something.ViewModel.Displ> = []

    var resourcebookings: Set<TeamplannerTab.Something.ViewModel.DisplayedResourcebooking> = []
    
  // MARK: Do something
    
//    func stringToEventsDate(myDateString: String) -> String {
//
//        let dateFormatter = DateFormatter()
//        let tempLocale = dateFormatter.locale // save locale temporarily
//        dateFormatter.locale = Locale(identifier: "nl_BE") // set locale to reliable US_POSIX
//        dateFormatter.dateFormat = "yyyy-MM-dd"
//        let date = dateFormatter.date(from: myDateString)!
//        dateFormatter.dateFormat = "EEEE, dd MMMM yyyy"
//        let dateString = dateFormatter.string(from: date)
//        dateFormatter.locale = tempLocale // reset the locale
//        return dateString
//
//    }
    
//    func resourcebookingAnalyze(resourcebooking: Resourcebooking) {
//        switch resourcebooking {
//        case .instantiableResourceUse(let instantiableResourceUse):
//            if let x = instantiableResourceUse.start!.convertDateString(dateFormat: "yyyy-MM-dd") {
//                date = x }
//            if let x = instantiableResourceUse.start {
//                start = x }
//            if let x = instantiableResourceUse.end {
//                end = x }
//            if let x = instantiableResourceUse.event {
//                if let y = x.name {
//                    eventName = y } }
//            if let x = instantiableResourceUse.role {
//                role = x }
//            let y = TeamplannerTab.Something.ViewModel.Displ(
//                date: date
//                ,start: start
//                ,end: end
//                ,eventName: eventName
//                ,role: role
//            )
////            resourcebookingDispls.append(y)
//            resourcebookingDispls.insert(y)
////            print(resourcebookingDispls)
//            break
//        case .freeFormResourceUse(let freeFormResourceUse):
//            if let x = freeFormResourceUse.start!.convertDateString(dateFormat: "yyyy-MM-dd") {
//                date = x }
//            if let x = freeFormResourceUse.start {
//                start = x }
//            if let x = freeFormResourceUse.end {
//                end = x }
//            eventName = freeFormResourceUse.event.name
//            role = ""
//            let y = TeamplannerTab.Something.ViewModel.Displ(
//                date: date
//                ,start: start
//                ,end: end
//                ,eventName: eventName
//                ,role: role
//            )
////            resourcebookingDispls.append(y)
//            resourcebookingDispls.insert(y)
////            print(resourcebookingDispls)
//            break
//        case .bulkResourceUse(let bulkResourceUse):
//            if let x = bulkResourceUse.start!.convertDateString(dateFormat: "yyyy-MM-dd") {
//                date = x }
//            if let x = bulkResourceUse.start {
//                start = x }
//            if let x = bulkResourceUse.end {
//                end = x }
//            if let x = bulkResourceUse.event {
//                if let y = x.name {
//                    eventName = y } }
//            if let x = bulkResourceUse.role {
//                role = x }
//            let y = TeamplannerTab.Something.ViewModel.Displ(
//                date: date
//                ,start: start
//                ,end: end
//                ,eventName: eventName
//                ,role: role
//            )
////            resourcebookingDispls.append(y)
//            resourcebookingDispls.insert(y)
////            print(resourcebookingDispls)
//            break
//        case .instantiableResourceUseGroup(let instantiableResourceUseGroup):
//            for instantiableResourceUse in instantiableResourceUseGroup.children {
//                if let x = instantiableResourceUse.start!.convertDateString(dateFormat: "yyyy-MM-dd") {
//                    date = x }
//                if let x = instantiableResourceUse.start {
//                    start = x }
//                if let x = instantiableResourceUse.end {
//                    end = x }
//                if let x = instantiableResourceUse.event {
//                    if let y = x.name {
//                        eventName = y } }
//                if let x = instantiableResourceUse.role {
//                    role = x }
//                let y = TeamplannerTab.Something.ViewModel.Displ(
//                    date: date
//                    ,start: start
//                    ,end: end
//                    ,eventName: eventName
//                    ,role: role
//                )
////                resourcebookingDispls.append(y)
//                resourcebookingDispls.insert(y)
////                print(resourcebookingDispls)
//                break
//            }
//        case .resourceSetUse(let resourceSetUse):
//            for resourcebooking in resourceSetUse.children {
//                print("resourceSetUseChild")
////                resourcebookingAnalyze(resourcebooking: resourcebooking)
//            }
//        }
    
    
  func presentSomething(response: TeamplannerTab.Something.Response)
  {
    resourcebookingDispls = []
    resourcebookings = []

    for resourceSchedule in response.resourceSchedules {
        if let schedules = resourceSchedule.schedules {
            for schedule in schedules {
                let item = TeamplannerTab.Something.ViewModel.Displ(
                    date: schedule.date
                    ,scheduleType: schedule.scheduletype
                    ,start: schedule.start
                    ,end: schedule.end
                )
                resourcebookingDispls.insert(item)
            }
        }
    }
    let dictResourcebookings = Dictionary(grouping: resourcebookingDispls, by: { $0.date })
    var items: [String:[TeamplannerTab.Something.ViewModel.Displ]] = [:]
    for (key, value) in dictResourcebookings {
        let valueSorted = value.sorted{ $0.start <  $1.start }
        items[key] = valueSorted
    }
    for (key, value) in items {
        resourcebookings.insert(TeamplannerTab.Something.ViewModel.DisplayedResourcebooking(date: key, resourcebookings: value))
    }

//        for (key, value) in dictResourcebookings {
//            let valueSorted = value.sorted{ $0.start <  $1.start }
//            items[key] = valueSorted
//        }
//
//        for (key, value) in items {
//            resourcebookings.insert(TeamplannerTab.Something.ViewModel.DisplayedResourcebooking(date: key, resourcebookings: value))
//        }
    
//        print(resourcebookings)
        
        
        
        let viewModel = TeamplannerTab.Something.ViewModel(
            displayedResourcebookings: resourcebookings
            , error: error
        )
        viewController?.displaySomething(viewModel: viewModel)
    }
}

func getResourcebookingId(_ id: String) -> Future<Resourcebooking> {
    return Future(operation: { completion in
        APIClient.resourcebookingId("\(id)")
            .map({$0})
            .execute(onSuccess: { items in
                completion(.success(items))
            }, onFailure: { error in
                completion(.failure(error))
            })
    })
}
