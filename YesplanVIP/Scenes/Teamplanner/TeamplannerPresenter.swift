//
//  TeamplannerPresenter.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 13/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PromisedFuture

protocol TeamplannerTabPresentationLogic
{
  func presentSomething(response: TeamplannerTab.Something.Response)
}

class TeamplannerTabPresenter: TeamplannerTabPresentationLogic
{
    
    
  weak var viewController: TeamplannerTabDisplayLogic?
    
//    var error: String?
//    var resourcebookingDispls: Set<TeamplannerTab.Something.ViewModel.Displ> = []
//    var resourcebookings: Set<TeamplannerTab.Something.ViewModel.DisplayedResourcebooking> = []
//    var dictResourcebookings: [String:[TeamplannerTab.Something.ViewModel.Displ]] = [:]
    
  // MARK: Do something
    
  func presentSomething(response: TeamplannerTab.Something.Response)
  {
    var error: String?
    var resourcebookingDispls: Set<TeamplannerTab.Something.ViewModel.Displ> = []
    var resourcebookings: Set<TeamplannerTab.Something.ViewModel.DisplayedResourcebooking> = []
    var dictResourcebookings: [String:[TeamplannerTab.Something.ViewModel.Displ]] = [:]

    for resourceSchedule in response.resourceSchedules {
        if let schedules = resourceSchedule.schedules {
        for schedule in schedules {
            schedule.eventName.execute(onSuccess: { result in
                var item: TeamplannerTab.Something.ViewModel.Displ = TeamplannerTab.Something.ViewModel.Displ(
                    date: schedule.date
                    , scheduleType: schedule.scheduletype
                    , start: schedule.start
                    , end: schedule.end
                    , eventName: ""
                )
                if let name = result {
                    item = TeamplannerTab.Something.ViewModel.Displ(
                    date: schedule.date
                    , scheduleType: schedule.scheduletype
                    , start: schedule.start
                    , end: schedule.end
                    , eventName: name
                    )
                } else {
                    item = TeamplannerTab.Something.ViewModel.Displ(
                    date: schedule.date
                    , scheduleType: schedule.scheduletype
                    , start: schedule.start
                    , end: schedule.end
                    , eventName: nil
                    )
                }
                resourcebookingDispls.insert(item)
                dictResourcebookings = Dictionary(grouping: resourcebookingDispls, by: { $0.date })
                var items: [String:[TeamplannerTab.Something.ViewModel.Displ]] = [:]
                for (key, value) in dictResourcebookings {
                    let valueSorted = value.sorted{ $0.start <  $1.start }
                    items[key] = valueSorted
                }
                resourcebookings = []
                for (key, value) in items {
                    resourcebookings.insert(TeamplannerTab.Something.ViewModel.DisplayedResourcebooking(date: key, resourcebookings: value))
                }
                let viewModel = TeamplannerTab.Something.ViewModel(
                    displayedResourcebookings: resourcebookings
                    ,error: error
                    )
                self.viewController?.displaySomething(viewModel: viewModel)
                })
            }
        }}
    }
}

