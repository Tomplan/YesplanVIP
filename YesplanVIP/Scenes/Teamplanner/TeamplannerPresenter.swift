//
//  TeamplannerPresenter.swift
//  YesplanVIP
//
//  Created by Techcc - FOH - Video on 13/08/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TeamplannerTabPresentationLogic
{
  func presentSomething(response: TeamplannerTab.Something.Response)
}

class TeamplannerTabPresenter: TeamplannerTabPresentationLogic
{
  weak var viewController: TeamplannerTabDisplayLogic?
  
  // MARK: Do something
  
  func presentSomething(response: TeamplannerTab.Something.Response)
  {
    var resourcebookingDispls: [TeamplannerTab.Something.ViewModel.Displ] = []
    var resourcebookings: [TeamplannerTab.Something.ViewModel.DisplayedResourcebooking] = []
    var name = ""
    
    for resourcebooking in response.resourcebookings {
        switch resourcebooking {
        case .instantiableResourceUse(let instantiableResourceUse):
            if let resource = instantiableResourceUse.resource {
                switch resource {
                case .bulkResource(let y):
                    if y.type == "Human" {
                        name = y.name
                    }
                case .instantiableResource(let y):
                    if y.type == "Human" {
                        name = y.name
                    }
                case .adHocResource(let y):
                    if y.type == "Human" {
                        name = y.name
                    }
                case .resourceSet(let y):
                    if y.type == "Human" {
                        name = y.name
                    }
                }
                let y = TeamplannerTab.Something.ViewModel.Displ(
                    date: instantiableResourceUse.start!.convertDateString(dateFormat: "yyyy-MM-dd")!
                    ,name: name // (x.resource?.name!)!
                    ,Start: instantiableResourceUse.start!
                    ,End: instantiableResourceUse.end!
                )
                resourcebookingDispls.append(y)
            }
        case .instantiableResourceUseGroup(let instantiableResourceUseGroup):
            if let resource = instantiableResourceUseGroup.resource {
                switch resource {
                case .bulkResource(let y):
                    if y.type == "Human" {
                        name = y.name
                    }
                case .instantiableResource(let y):
                    if y.type == "Human" {
                        name = y.name
                    }
                case .adHocResource(let y):
                    if y.type == "Human" {
                        name = y.name
                    }
                case .resourceSet(let y):
                    if y.type == "Human" {
                        name = y.name
                    }
                }
                let y = TeamplannerTab.Something.ViewModel.Displ(
                    date: "no date" // instantiableResourceUseGroup.start!.convertDateString(dateFormat: "yyyy-MM-dd")!
                    ,name: name // (x.resource?.name!)!
                    ,Start: "no date" // instantiableResourceUseGroup.start!
                    ,End: "no end" // instantiableResourceUseGroup.end!
                )
                    resourcebookingDispls.append(y)
            }
        case .resourceSetUse(let resourceSetUse):
            if let resource = resourceSetUse.resource {
                switch resource {
                case .bulkResource(let y):
                    if y.type == "Human" {
                        name = y.name
                    }
                case .instantiableResource(let y):
                    if y.type == "Human" {
                        name = y.name
                    }
                case .adHocResource(let y):
                    if y.type == "Human" {
                        name = y.name
                    }
                case .resourceSet(let y):
                    if y.type == "Human" {
                        name = y.name
                    }
                }
                let y = TeamplannerTab.Something.ViewModel.Displ(
                    date: "no date" // instantiableResourceUseGroup.start!.convertDateString(dateFormat: "yyyy-MM-dd")!
                    ,name: name // (x.resource?.name!)!
                    ,Start: "no date" // instantiableResourceUseGroup.start!
                    ,End: "no end" // instantiableResourceUseGroup.end!
                )
                resourcebookingDispls.append(y)
            }
        }
    }
        
//        resourcebookings.append(TeamplannerTab.Something.ViewModel.DisplayedResourcebooking(date: stringToEventsDate(myDateString: resourcebooking), events: value))
    let dictResourcebookings = Dictionary(grouping: resourcebookingDispls, by: { $0.date })

    for (key, value) in dictResourcebookings {
        resourcebookings.append(TeamplannerTab.Something.ViewModel.DisplayedResourcebooking(date: key, resourcebookings: value))
    }
    let viewModel = TeamplannerTab.Something.ViewModel(
        displayedResourcebookings: resourcebookings
    )
    viewController?.displaySomething(viewModel: viewModel)
  }
}
